#pragma kernel MeanAveraging
#pragma kernel ClearBuffer
#pragma kernel fill_depth_from_prev
#pragma kernel update_depth_buffer

// Size of the buffers
#define WIDTH 640
#define HEIGHT 480

// Number of frames
int num_frames;

// For Edge Detection Min Grad
float edgeThreshold;

// Buffers
RWStructuredBuffer<float> depth_ar; // EdgeDetection, MeanAveraging, MedianAveragingFast, MedianAveragingNaive 
RWStructuredBuffer<float> depth_buffer; // MeanAveraging, ClearBuffer, MedianAveragingFast, MedianAveragingNaive 

// buffer pos
int buffer_pos;
int prev_buffer_pos;

// activate filter or not
bool activate;

float varianceThreshold;

// Clear Buffer Data
[numthreads(16, 16, 1)]
void ClearBuffer(uint3 groupId : SV_GroupID, uint3 threadId : SV_GroupThreadID)
{
    int xIndex = groupId.x * 16 + threadId.x;
    int yIndex = groupId.y * 16 + threadId.y;

    if (xIndex < WIDTH && yIndex < HEIGHT)
    {
        for (int i = 0; i < num_frames; i++)
        {
            int idx = i * WIDTH * HEIGHT + xIndex + yIndex * WIDTH;
            depth_buffer[idx] = 0.0f;
        }
    }
}


// Fast Median Averaging
[numthreads(16, 16, 1)]
void MeanAveraging(uint3 groupId : SV_GroupID, uint3 threadId : SV_GroupThreadID)
{
    int xIndex = groupId.x * 16 + threadId.x;
    int yIndex = groupId.y * 16 + threadId.y;

    int index = xIndex + yIndex * WIDTH;
    depth_buffer[buffer_pos * WIDTH * HEIGHT + index] = depth_ar[index];

    if (xIndex < WIDTH && yIndex < HEIGHT && activate)
    {
        float weighted_sum = 0.0;
        float total_weight = 0.0;
 
        for (int i = 0; i < num_frames - 1; i++)
        {
            int idx = i * WIDTH * HEIGHT + index;
            //float weight = 1.0;
            //weight = 1.0;
            if (depth_buffer[idx] > 0.005)
            {
                weighted_sum += depth_buffer[idx];
                total_weight += 1.0;
            }
        }
        
        float variance = 0.0;
        
        if (total_weight > 0.0)
        {
            depth_ar[index] = weighted_sum / total_weight;
            
            for (int i = 0; i < num_frames - 1; i++)
            {
                int idx = i * WIDTH * HEIGHT + index;
                if (depth_buffer[idx] > 0.005)
                {
                    variance = (depth_buffer[idx] - depth_ar[index]) * (depth_buffer[idx] - depth_ar[index]);
                }
            }
            
            variance = variance / total_weight / depth_ar[index];
            if (variance > varianceThreshold)
            {
                depth_ar[index] = 0.0;
            }
        }
        else
        {
            depth_ar[index] = 0.0;
        }

        
    }
}

// Fill current depth buffer with previous frames' data
[numthreads(16, 16, 1)]
void fill_depth_from_prev(uint3 groupId : SV_GroupID, uint3 threadId : SV_GroupThreadID)
{
    int xIndex = groupId.x * 16 + threadId.x;
    int yIndex = groupId.y * 16 + threadId.y;

    int index = xIndex + yIndex * WIDTH;
    int prev_idx = prev_buffer_pos * WIDTH * HEIGHT + index;

    if (xIndex < WIDTH && yIndex < HEIGHT)
    {
        if (depth_ar[index] < 0.01)
        {
            depth_ar[index] = depth_buffer[prev_idx];
        }
    }
}

// Fill current depth buffer with previous frames' data
[numthreads(16, 16, 1)]
void update_depth_buffer(uint3 groupId : SV_GroupID, uint3 threadId : SV_GroupThreadID)
{
    int xIndex = groupId.x * 16 + threadId.x;
    int yIndex = groupId.y * 16 + threadId.y;

    int index = xIndex + yIndex * WIDTH;
    int buffer_idx = buffer_pos * WIDTH * HEIGHT + index;

    if (xIndex < WIDTH && yIndex < HEIGHT)
    {
        depth_buffer[buffer_idx] = depth_ar[index];
    }
}
